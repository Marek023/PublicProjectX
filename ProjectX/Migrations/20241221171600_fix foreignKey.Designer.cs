// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using ProjectX.Data.Contexts;

#nullable disable

namespace ProjectX.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20241221171600_fix foreignKey")]
    partial class fixforeignKey
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ProjectX.Data.Entities.AssetCategories", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.ToTable("AssetCategories");
                });

            modelBuilder.Entity("ProjectX.Data.Entities.AssetHistorical", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AddedSecurity")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("AssetId")
                        .HasColumnType("integer");

                    b.Property<string>("Date")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("DateAdded")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("DateSave")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Reason")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("RemovedSecurity")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("RemovedTicker")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Symbol")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("AssetId")
                        .IsUnique();

                    b.ToTable("AssetHistorical");
                });

            modelBuilder.Entity("ProjectX.Data.Entities.AssetHistoricalData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<decimal>("AdjClose")
                        .HasColumnType("numeric");

                    b.Property<int>("AssetsId")
                        .HasColumnType("integer");

                    b.Property<decimal>("Change")
                        .HasColumnType("numeric");

                    b.Property<decimal>("ChangeOverTime")
                        .HasColumnType("numeric");

                    b.Property<decimal>("ChangePercent")
                        .HasColumnType("numeric");

                    b.Property<decimal>("Close")
                        .HasColumnType("numeric");

                    b.Property<string>("Date")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("DateSave")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("High")
                        .HasColumnType("numeric");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<decimal>("Low")
                        .HasColumnType("numeric");

                    b.Property<decimal>("Open")
                        .HasColumnType("numeric");

                    b.Property<long>("UnadjustedVolume")
                        .HasColumnType("bigint");

                    b.Property<long>("Volume")
                        .HasColumnType("bigint");

                    b.Property<decimal>("Vwap")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("AssetsId");

                    b.ToTable("AssetHistoricalData");
                });

            modelBuilder.Entity("ProjectX.Data.Entities.AssetNotificationQueue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("NotificationContent")
                        .HasColumnType("text");

                    b.Property<DateTime?>("NotificationDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("AssetNotificationQueue");
                });

            modelBuilder.Entity("ProjectX.Data.Entities.Assets", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AssetCategoryId")
                        .HasColumnType("integer");

                    b.Property<string>("Cik")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("DateFirstAdded")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("DateSave")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Founded")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("HeadQuarter")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Sector")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("SubSector")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Symbol")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("AssetCategoryId");

                    b.ToTable("Assets");
                });

            modelBuilder.Entity("ProjectX.Data.Entities.ExcludedAssets", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AssetCategoryId")
                        .HasColumnType("integer");

                    b.Property<string>("Cik")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("DateFirstAdded")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("DateSave")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Founded")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("HeadQuarter")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool>("NotificationCreated")
                        .HasColumnType("boolean");

                    b.Property<string>("Sector")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("SubSector")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Symbol")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("AssetCategoryId");

                    b.ToTable("ExcludedAssets");
                });

            modelBuilder.Entity("ProjectX.Data.Entities.NewAssets", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AssetCategoryId")
                        .HasColumnType("integer");

                    b.Property<string>("Cik")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("DateFirstAdded")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("DateSave")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Founded")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("HeadQuarter")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool>("NotificationCreated")
                        .HasColumnType("boolean");

                    b.Property<string>("Sector")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("SubSector")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Symbol")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("AssetCategoryId");

                    b.ToTable("NewAssets");
                });

            modelBuilder.Entity("ProjectX.Data.Entities.Role", b =>
                {
                    b.Property<Guid>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("RoleId");

                    b.ToTable("Role");
                });

            modelBuilder.Entity("ProjectX.Data.Entities.User", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEmailVerified")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastLogin")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("UserId");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("User");
                });

            modelBuilder.Entity("ProjectX.Data.Entities.UserRole", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("AssignedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRole");
                });

            modelBuilder.Entity("ProjectX.Data.Entities.UserSetting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool?>("SendAssetChanges")
                        .HasColumnType("boolean");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserSetting");
                });

            modelBuilder.Entity("ProjectX.Data.Entities.UserSettingAssetNotificationQueue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("AssetNotificationQueueId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool?>("NotificationSent")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("SentDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("UserSettingId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AssetNotificationQueueId");

                    b.HasIndex("UserSettingId");

                    b.ToTable("UserSettingAssetNotificationQueue");
                });

            modelBuilder.Entity("ProjectX.Data.Entities.AssetHistorical", b =>
                {
                    b.HasOne("ProjectX.Data.Entities.Assets", "Asset")
                        .WithOne("AssetHistorical")
                        .HasForeignKey("ProjectX.Data.Entities.AssetHistorical", "AssetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Asset");
                });

            modelBuilder.Entity("ProjectX.Data.Entities.AssetHistoricalData", b =>
                {
                    b.HasOne("ProjectX.Data.Entities.Assets", "Assets")
                        .WithMany("AssetHistoricalDatas")
                        .HasForeignKey("AssetsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Assets");
                });

            modelBuilder.Entity("ProjectX.Data.Entities.Assets", b =>
                {
                    b.HasOne("ProjectX.Data.Entities.AssetCategories", "AssetCategory")
                        .WithMany("Assets")
                        .HasForeignKey("AssetCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AssetCategory");
                });

            modelBuilder.Entity("ProjectX.Data.Entities.ExcludedAssets", b =>
                {
                    b.HasOne("ProjectX.Data.Entities.AssetCategories", "AssetCategory")
                        .WithMany("ExcludedAssets")
                        .HasForeignKey("AssetCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AssetCategory");
                });

            modelBuilder.Entity("ProjectX.Data.Entities.NewAssets", b =>
                {
                    b.HasOne("ProjectX.Data.Entities.AssetCategories", "AssetCategory")
                        .WithMany("NewAssets")
                        .HasForeignKey("AssetCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AssetCategory");
                });

            modelBuilder.Entity("ProjectX.Data.Entities.UserRole", b =>
                {
                    b.HasOne("ProjectX.Data.Entities.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProjectX.Data.Entities.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ProjectX.Data.Entities.UserSetting", b =>
                {
                    b.HasOne("ProjectX.Data.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ProjectX.Data.Entities.UserSettingAssetNotificationQueue", b =>
                {
                    b.HasOne("ProjectX.Data.Entities.AssetNotificationQueue", "AssetNotificationQueue")
                        .WithMany("UserSettingAssetNotificationQueue")
                        .HasForeignKey("AssetNotificationQueueId");

                    b.HasOne("ProjectX.Data.Entities.UserSetting", "UserSetting")
                        .WithMany("UserSettingAssetNotificationQueue")
                        .HasForeignKey("UserSettingId");

                    b.Navigation("AssetNotificationQueue");

                    b.Navigation("UserSetting");
                });

            modelBuilder.Entity("ProjectX.Data.Entities.AssetCategories", b =>
                {
                    b.Navigation("Assets");

                    b.Navigation("ExcludedAssets");

                    b.Navigation("NewAssets");
                });

            modelBuilder.Entity("ProjectX.Data.Entities.AssetNotificationQueue", b =>
                {
                    b.Navigation("UserSettingAssetNotificationQueue");
                });

            modelBuilder.Entity("ProjectX.Data.Entities.Assets", b =>
                {
                    b.Navigation("AssetHistorical");

                    b.Navigation("AssetHistoricalDatas");
                });

            modelBuilder.Entity("ProjectX.Data.Entities.Role", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("ProjectX.Data.Entities.User", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("ProjectX.Data.Entities.UserSetting", b =>
                {
                    b.Navigation("UserSettingAssetNotificationQueue");
                });
#pragma warning restore 612, 618
        }
    }
}
